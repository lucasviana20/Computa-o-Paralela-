#include <pthread.h>
#include <iostream>
#include <stdlib.h>
#include <unistd.h>

int thread_count = 3 , n = 12;

double sum = 0;

void *Thread_sum(void* rank)
{
	long my_rank = (long) rank;
	
	double factor;
	
	long long i;
	
	long long my_n = n / thread_count;
	
	long long my_first_i = my_n * my_rank;
	
	long long my_last_i = my_first_i + my_n;
	
	if (my_first_i % 2 == 0)
	{
	    factor = 1.0;
	}
	
	else
	{
	    factor = -1.0;
	}
	
	for (i = my_first_i ; i < my_last_i ; i++ , factor = -factor)
	{
		sum = sum + factor / (2 * i + 1);
	}
	
	return NULL;
}

int main()
{
    pthread_t thread_handles[3];
    
	for (pthread_t thread = 0 ; thread < thread_count ; thread++)
	{
	    pthread_create(&thread_handles[thread] , NULL , Thread_sum , (void*) thread);
	}
	
	for (pthread_t thread = 0 ; thread < thread_count ; thread++)
	{
	    pthread_join(thread_handles[thread] , NULL);
	}
	
    std::cout << "Pi: " << 4 * sum;
    
	return 0;
}
