#include <pthread.h>
#include <iostream>
#include <stdlib.h>
#include <unistd.h>

int thread_count = 3, m = 6, n = 6, x[6] = {1,2,3,4,5,6} , y[6];

int A[6][6] = {{1,1,1,1,1,1} , {2,2,2,2,2,2} , {3,3,3,3,3,3} , {4,4,4,4,4,4} , {5,5,5,5,5,5} , {6,6,6,6,6,6}};

void *Pth_mat_vect(void* rank)
{
	long my_rank = (long) rank;
	
	int i , j;
	
	int local_m = m / thread_count;
	
	int my_first_row = my_rank*local_m;
	
	int my_last_row = (my_rank + 1)* local_m - 1;
	
	for (i = my_first_row ; i <= my_last_row ; i++ )
	{
		y[i] = 0.0;
		
		for (j = 0 ; j < n ; j++)
		{
			y[i] = y[i] + A[i][j] * x[j];
		}
	}
	
	return NULL;
}

int main()
{
    pthread_t thread_handles[3];
    
	for (pthread_t thread = 0 ; thread < thread_count ; thread++)
	{
	    pthread_create(&thread_handles[thread] , NULL , Pth_mat_vect , (void*) thread);
	}
	
	for (pthread_t thread = 0 ; thread < thread_count ; thread++)
	{
	    pthread_join(thread_handles[thread] , NULL);
	}
	
	std::cout << "Matriz A: \n";
	
	for(int i = 0 ; i < 6 ; i++)
	{
	    for(int j = 0 ; j < 6 ; j++)
	    {
	        std::cout << A[i][j] << " ";
	    }
	    
	    std::cout << "\n";
	}
	
	std::cout << "\nVetor X: ";
	
	for(int i = 0 ; i < 6 ; i++)
	{
	    std::cout << x[i] << " ";
	}
	
	std::cout << "\n\nVetor A * X: ";
	
	for(int i = 0 ; i < 6 ; i++)
	{
	    std::cout << y[i] << " ";
	}
	
	return 0;
}

